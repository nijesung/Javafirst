// *접근 지정자*

// 클래스나 인스턴스 변수나 메소드, 클래스 변수나 메소드 앞에 붙여서 사용범위를 제한하는 것.
// 종류: public, default, protected, private
// public : 모든 곳에서 사용 가능한 클래스. #하나의 파일에는 1개 이하의 public 클래스만 존재해야 한다.
// default(생략) : 자신의 package(디렉토리) 안에서만 사용 가능한 접근 지정자
// protected : 상속받은 클래스 에서만 사용 가능
// private : 현재 위치에서만 사용 가능. 다른 클래스에서는 사용할 수 없다.

// #protected 와 private은 클래스 안의 클래스를 만들 때만 사용할 수 있다.

// 인스턴스 변수 메소드 - public : 클래스 내부에서 사용할 수 있고, 클래스 외부에서 인스턴스나 클래스가 사용할 수 있게 해주는 접근 지정자.
//               - protected : 현재 클래스 내부와 상속받은 클래스 내부에서 사용할 수 있도록 해 주는 접근 지정자.
//               - default(생략) : 패키지 내부에서는 public, but 패키지 외부에서는 private
//               - private : 외부에 노출되지 않게 은닉되어 있음. 클래서 내부에서만 사용할 수 있도록 해주는 접근 지정자.
//                           이유는 사용하지 않는 곳에서는 보여주지도 않는 것이 오류 발생을 줄일 수 있기 때문입니다.
//                                                            #모든 변수는 "private" 으로 만든다.
//                                                            #모든 메소드는 "public" 으로 만든다.

// **접근자메소드
// 인스턴스 변수를 private 으로 만들면 인스턴스가 변수에 접근을 못 하게 되는데 이 때 변수를 사용할 수 있도록 만들어주는 메소드를
// 접근자 메소드라고 한다.
// 데이터를 가져오는 메소드를 getter 라고 하고 데이터를 성정하는 메소드를 setter 라고 한다.

// 1) getter
// 접근지정자는 public 으로 하고 리턴 타입은 변수의 자료형과 동일하게 하고 이름은 get 변수명으로 만드는데 변수명의 첫글자는 대문자로
// 시작한다. 매개변수는 없으며 내용은 변수를 리턴하기만 하면 된다.
// 이름은 예외적으로 boolean 인 경우에는 get 대신에 is 를 붙이기도 한다. (is 가 앞에 붙으면 무조건 판별하는 내용이다)

// 2) setter
// 접근 지정자는 public 으로 하고 리턴 타입은 void 이고 이름은 set 변수명으로 만드는데 변수명의 첫글자는 대문자로 시작한다.
// 매개변수는 변수의 자료형과 동일한 자료형으로 1개를 만들어야 하고 메소드의 내용은 인스턴스 변수에 매개변수의 값을 대입하는 코드만
// 작성합니다.
// 요즘 나오는 IDE(integrated Development Environment) 는 이 메소드들을 자동으로 만들어주는 기능을 제공한다.
// 통합 개발 환경: 코딩과 컴파일 및 디버깅 등을 한번에 할 수 있도록 해주는 프로그램으로 자바는 이클립스, 인텔리j 등이 있습니다.

// 3) toString
// 인스턴스 변수의 내용을 묶어서 하나로 만들어주는 메소드.
// 출력하는 메소드에 인스턴스 변수의 이름을 대입하면 자동으로 이 메소드를 호출해서 출력을 한다.
// 디버깅(논리적인 오류나 예외가 발생해서 소스 코드를 확인하는 일련의 작업) 을 빨리 하기 위해서 사용한다.

package nije0702;

public class 접근지정자 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
