// *interface - Protocol(규칙,규약,약속)
// 추상 메소드와 final 변수만을 가진 Java 객체
// 추상 클래스는 일반 변수나 메소드도 소유할 수 있지만 intherface 는 추상 메소드 만을 소유한다.
// <인터페이스는 다중 상속과는 어떠한 관계도 없다.>
// 선언과 구현을 분리하기 위한 것
// 메소드를 선언할 때 abstract 를 붙이지 않아도 abstract 가 자동 삽입된다.
// 변수를 만들 때 final 을 붙이지 않아도 final 이 자동으로 삽입된다.

// 1. 생성
//    interface 인터페이스 이름{
//    메소드 선언
//    변수 선언  
//    }

// 2. 클래스가 인터페이스를 사용
//    class 클래스이름 extends 상위 클래스 이름 implements 인터페이스 이름 나열 {
//    }
//    인터페이스는 내용이 없기 때문에 상속하는 것이 아니고 구현하는 것이다.
//    인터페이스는 하나의 클래스에 여러 개 implements 할 수있다.

// 3. 인터페이스도 내용이 없기 때문에 인스턴스를 생성할 수 없지만(new 불가) 변수는 선언이 가능하다.
//    클래스 처럼 인터페이스 변수도 자신을 implements 한 클래스의 인스턴스 주소를 대입받을 수 있다.

// 4. 인터페이스는 여러 개 implements 할 수 있다.

// 5. 인터페이스도 상속할 수 있다.
//    인터페이스를 다른 인터페이스에 상속할 때(인터페이스 끼리) 는 extends 를 이용해야 한다.

// **class 사이의 관계
// 1. has a
//    하나의 클래스 안에서 다른 클래스를 사용하는 것 (포함 관계)

// 2. is a
//    (상속 관계)

// **내부 클래스
// 클래스 안에 존재하는 클래스를 일컫음.
// 1. inner class
//    클래스 안에 존재하는 클래스
//    다른 클래스들은 사용을 하지 않고 자신만 사용하는 클래스가 있을 때 클래스 안에 클래스를 만드는 것
//    이 클래스를 만들면 외부클래스 $ 내부클래스 이름으로 별도의 클래스가 만들어 집니다.
// 2. static inner class
//    static 멤버를 소유한 inner class
// 3. local inner class
//    메소드 안에 존재하는 inner class
// 4. Anonymous class (익명 클래스)
//    클래스 이름이 없는 클래스의 객체. 속도는 느리지만 메모리를 절약할 수 있다.
//    인터페이스나 클래스를 상속받은 후 인스턴스를 생성해서 사용해야 하는 경우 인터페이스나 클래스를
//    상속받은 클래스를 만들고 그 클래스의 인스턴스를 만들어서 사용해야 한다.
//    # 이 때 클래스의 인스턴스를 1개만 만들어서 사용한다면 클래스를 만드는 것은 낭비가 될 수 있다.
//    위 처럼 인스턴스를 1개만 만들어서 사용하는 경우에는 필요할 때 클래스를 만들지 않고 바로 인스턴스를
//    만들어서 사용할 수 있도록 해주는 문법이 바로 Annonymous class 이다.
//    # Java GUI Programming의 이벤트 처리와 안드로이드에서 많이 사용하는 문법이다.
//    # Android Studio 에서는 이 문법을 사용하면 람다 표현식으로 변환하는 작업까지 자동으로 수행 해 준다.
// 사용하는 법
// 상위 클래스이름 변수명 = new 상위클래스 이름(){
// 메소드 재 정의{
//      }
// };
// 즉 별도의 클래스를 만들지 않는다. 이렇게 작성하면 상위 클래스를 상속받은 클래스를 만들어서 인스턴스를 생성하는 것과 동일한 작업이 수행

// **java에서 스레드를 생성해서 실행하는 방법
// Thread 클래스를 상속받은 클래스에 run 메소드를 재정의해서 스레드로 수행할 내용을 작성하고 인스턴스를 만든 후 start() 
// 를 호출 하면 된다.

// 가장 많이 사용되는 클래스는 익명 클래스 이다.
// 나머지 3 종류는 보통 안드로이드에서 사용된다.

// **데이터 공유
// 1. 동일한 클래스들 로부터 만들어진 인스턴스의 경우
//    => static  변수 이용

// 2. 서로 다른 클래스들 로부터 만들어진 인스턴스의 경우
// 2-1. 포함 관계인 경우
//      생성자를 이용해서 데이터 넘기기 - 속도는 빠르지만 메모리를 많이 사용
//      => 생성자나 setter 를 이용 : 메모리를 적게 사용하지만 속도가 느림
// 2-2. 포함 관계가 아닌 경우
//      => 전역 변수를 만들어서 메소드 안에서 전역변수를 수정하면 된다.
//         전역 변수를 만들어서 사용하는 방법은 싱글톤 패턴을 이용하는 것이 좋기 때문에 디자인 패턴을 배우고 난 후에 실습



package Interface;

public interface MemberService { // 메소드의 원형과 final 변수만을 가지는 개체
	                             // 이 곳에 선언문을 만들고 이 인터페이스를 Implements 해서 클래스에서 실제 내용을 구현
	                             // 인터페이스의 메소드는 abstract 를 붙이지 않아도 추상 메소드이다
		                         // 여기에 만드는 메소드는 내용 { } 을 가지면 안 된다
		
		public boolean idCheck(String id); // 아이디 중복 체크를 위한 메소드 ( String 형)
	//	public int surveillant(int id); // 아이디 중복 체크를 위한 메소드 ( int 형)
		
		public int login(String id, String password); // 로그인 처리를 위한 메소드
	

}
