// **Java Web Programming 을 하기 위한 환경 설정
// 1. JDK(자바 개발 도구) 설치
//    se 버전을 설치한다.
//    윈도우나 리눅스의 경우는 설치하고 난 후 환경 변수를 설정한다.
//    mac 은 환경변수 설정이 자동화 되기 때문에 별도의 설정이 필요 없다.
//    설치 확인: 터미널(max, linux)이나 cmd(윈도우) 창에서 한다.

//    java -version
//    자바실행도구(JRE - JVM) 확인
//    javac -version
//    자바개발도구(JDK) 확인

// 2. WAS(Web Application Server - WebContainer) 설치 - Apache Tomcat
//    서버용 프로그래밍 언어가 만든 결과를 HTML 로 변환해서 웹 서버에게 전달하는 역할을 수행
//    Apache Tomcat 은 웹 서버의 역할과 WAS 역할을 동시에 수행하는 프로그램
//    윈도우 에서는 설치 버전을 받아 인스톨하면 되고 맥이나 리눅스 에서는 압축된 버전을
//    다운로드 받아 압축을 풀기만 하면 된다.
//    서버의 시작은 bin 이라는 디렉토리에 있는 startup.sh(윈도우는 bat) 을 실행하면 되고
//    서버의 중지는 shutdown.sh 를 실행하면 된다.
//    프로그램을 실행 했는데 처음 서버가 실행되지 않고 포트번호를 보여주면 이 경우는 이미 실행
//    중이어서 실행이 안 되는 케이스이니 shutdown.sh 를 실행 해 주면 된다.
//    http://tomcat.apache.org/ 에서 다운로드
//    기본적으로 톰캣은 8080 포트를 사용하지만 변경은 가능하다.
//    conf 디렉토리에 있는 server.xml 파일에서 가능하다.
//    windows 에 오라클 xe 버전을 설치한 경우에는 포트를 변경 해 주어야 한다.

// 3. IDE(통합 개발 환경 - 코드를 작성하고 실행하는 프로그램) 설치
//    Eclipse 설치
//    eclipse.org 에서 다운로드
//    자바 웹 프로그래밍을 하기 위해서는 Java EE	 버전을 설치해야 한다.
//    윈도우에 설치한 경우에는 환경 설정에 가서 workspace 및 html, css, jsp
//    파일의 인코딩 설정을 utf-8로 변경한다.
//    실행할 브라우저를 선택한다.
//    이클립스의 환경 설정은 workspace 단위로 저장

// 4. DB Server 를 설치하거나 DB 접속도구를 설치


// **웹 프로젝트 생성
// 1. 프로젝트 생성
//    [File] - [New] - [Dynamic Web Project]
//    source folder: src - java 파일은 이 디렉토리에 만들어야 합니다.
//                   이 디렉토리에 있는 것만 컴파일 합니다.
//                   default output folder - 컴파일 된 클래스 파일이 저장될 디렉토리
//           		 기본은 WEB-INF/lib/classes

//					 Context root: url에 설정될 도메인입니다.
//					 Content Directory: 컴파일 되지 않아도 되는 파일이 위치해야 디렉토리
//				     java 소스 파일을 제외한 모든 파일들이 위치해야 하는 디렉토리
//					 기본은 WebContent
//                   Generate.web.xml
//                   프로젝트 환경 설정 파일을 처음부터 만들 것 인지의 여부를 체크하는 항목
//                   되도록 체크할 

// 2. jsp 파일 생성
//    WebContent 디렉토리에 생성해야 한다.
//    하위 디렉토리를 만들고 그 안에 작성해도 된다.
//    META-INF 나 WEb-INF 디렉토리에 만들면 안 된다.
//    META-INF 디렉토리는 외부 자원에 대한 위치를 설정하기 위한 파일이 저장되는 디렉토리
//    WEb-INF 디렉토리는 프로젝트 환경 설정에 관련된 파일이 저장되는 디렉토리
//    jsp 파일을 만들면 에러가 발생할 수 있다.
//    jsp 파일은 HttpServlet 이라는 클래스의 인스턴스로 변환이 되는데 java se 에는
//    HttpServlet 이라는 클래스가 없기 때문에 에러가 발생하는 것이다.
//    tomcat 프로그램의 lib 디렉토리에 있는 servlet-api.jar 파일을 프로젝트의
//    WEB-INF/lib 디렉토리에 복사해 주면 해결된다.

// 3. Web Project 실행
//    처음 실행할 때는 WAS 를 설정 해 주어야 한다.
//    실행할 때 프로젝트를 선택하고 실행하면 설정 파일의 내용을 읽어서 시작할 파일을 선택한다.
//    jsp 파일이나 html 파일을 선택하고 실행해도 가능하다.\

// # mac 에서 숨김파일 보기
//   shift + command + .

// 4. 톰캣 에러
//    포트를 사용중이거나 서버가 이미 실행 된 경우에는 포트를 사용 중인 프로그램을 중지하거나
//    톰캣의 포트를 변경하면 되고 서버가 이미 실행 중이라서 안 되는 경우에는 서버를 중지시키면 된다.


// **JSP 와 Servlet
// 1. HttpServlet
//    url 을 이용해서 호출할 수 있는 Java EE 의 클래스
//    클래스 상태로 존재하다가 사용자가 요청을 하면 인스턴스를 만들거나 기존의 인스턴스를 이용하여
//    작업을 처리
//    자바 코드 안에 HTML 을 삽입하는 구조이기 때문에 HTML 을 이용한 출력용으로는 적합하지 않다.
//    클래스 상태로 존재하기 때문에 소스코드를 수정하면 반드시 서버를 재 실행해야 한다.

// 2. JSP(Java Server Pages) - 서블릿 사용이 어려워 서블릿을 쉽게 사용할 수 있도록 만든 페이지
//    소스코드 상태로 존재하다가 사용자가 요청을 하면 HttpServlet 클래스로 변환하고
//    인스턴스를 생성해서 작업을 처리한다.
//    소스코드 상태로 존재하기 때문에 수정을 해도 재 실행할 필요 없이 새로고침만 하면 된다.
//    HTML 코드 안에 java 코드를 삽입하는 구조라서 java 코드를 작성하는 것이 불편하기
//    때문에 작업을 처리하는 용도 보다는 데이터를 출력하는 용도로 사용하는 것이 바람직


// **JSP
// 1. 디렉티브
//    jsp 페이지에 대한 설정을 위한 것
//    <%@디렉토리이름 속성="값"%> 의 형태로 설정
//    디렉티브 이름은 3가지고 있는 page, include, taglib 이다.
// 1-1. <%@ page import="임포트할 패키지 이름 나열"%>

// 2. 스크립트
// 2-1. 자바 코드를 사용하고자 하는 경우
//      <% 자바코드 %>
// 2-2. 자바 코드를 출력하고자 하는 경우
//      <%=데이터%>

// ex) java.util.Calendar 객체를 오늘 날짜를 가지고 생성해서 년, 월, 일 을 출력

// # javascript 는 브라우저 외부에 접근할 수 없다.
//   자신의 도메인에만 데이터를 요청할 수 있다.

// 3. page trimDirectiveWhitespaces
//    이 디렉티브는 불필요한 공백을 제거해 준다.
//    <%@ page trimDirectiveWhitespaces="true" %>
//    를 jsp 페이지 상단에 추가하면 된다.

// ex) jsp 페이지를 만들어서 20번째 피보나치 수열의 값을 구해서 출력

// ex2) 이름과 나이를 Map 을 이용해서 저장하고 이러한 Map 을 List 에 저장한 후 테이블로 출력
//      여러 개의 항목을 가진 것은 맵을 이용하거나 별도로 클래스를 만들어서 처리
//      세로 방향으로 여러 개를 저장하고자 하면 이 때는 배열이나 리스트 를 이용한다.


// **내장 객체
// jsp 페이지가 만들어 질 때 자동으로 생성되어 포함되는 객체
// 1. requset
//    클라이언트의 요청 정보를 저장한 객체
// 1-1. 기본 메소드
//      getRemoteAdd()
//      클라이언트의 IP 주소를 문자열로 리턴
//      window7	이상이면 ipv6 그 이하는 ipv4 형식으로 리턴된다.
//      자신의 컴퓨터에서 접속하면 0:0:....1 이나 127.0.0.1 이다.

//      getContextPath()
//      기본 경로를 문자열로 리턴한다.

//      getRequestURI()
//		요청 경로 전체를 문자열로 리턴한다.

//      getQueryString()
//      파라미터 부분을 문자열로 리턴한다.

// 2. 파라미터
//    클라이언트가 서버에게 전송하는 데이터
//    query string 이라고 하기도 한다.
//    전송 방식
//    get: 전송 방식을 생략하거나 명시적으로 get 으로 설정한 경우에 전송되는 방식으로
//    파라미터를 URL 뒤에 붙여서 전송한다.
//    파라미터를 URL 뒤에 붙여서 전송하기 때문에 보안이 취약하고 전달하는 데이터의 길이에
//    제한이 있다.
//    자동 재전송 기능이 존재

//    post
//    전송 방식을 명시적으로 post 라고 설정한 경우에만 전송되는 방식으로 파라미터를 header 에  숨겨서
//    전송하는 방식이다.
//    헤더에 숨겨서 전송하기 때문에 get 방식보다는 보안이 우수하고 데이터의 길이에도 제한이 없다.
//    자동 재전송 기능이 없다.

//    # get 방식은 인코딩을 WAS 에서 판단하고 post 방식일 때는 application 이 판단한다.
//      get 방식은 톰캣에 인코딩 방식을 설정하면 인코딩 처리를 할 수 있고 post	방식일 때는
//      파라미터를 읽기 전에 request.setCharacterEncoding("인코딩 방식")을 설정해 주면 된다.

// 2-1. 파라미터를 읽는 메소드
//      String getParameter("파라미터 name")
//      name 에 해당하는 파라미터를 읽어서 문자열로 리턴
//      name 에 입력된 값이 없을 때는 "" 리턴
// 		없는 name 을 입력한 경우에는 null 리턴

//      String[]getParameterValues("파라미터 name")
//      name 에 해당하는 파라미터를 읽어서 문자열 배열로 리턴
//      Checkbox 나 select 태그 처럼 여러 개를 선택할 수 있는 파라미터에 사




package Web;

public class 필기0824 {

}
