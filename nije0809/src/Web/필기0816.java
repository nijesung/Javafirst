// # Stack
// 가장 마지막에 넣은 걸 먼저 꺼내 쓴다.
// 편의점 진열창에 물건 집어넣고 꺼내는 것을 생각하면 어떤 개념인지 이해하기 편하다.

// # queue
// 가장 처음에 넣은 걸 먼저 꺼내 쓴다.
// 놀이공원에서 먼저 줄 선 사람이 맨 먼저 입장하는 것과 같다.
// 주문번호 프로그램에 쓰이기도 함

// # Deque 
// 양쪽에서 삽입 삭제가 가능한 자료구조
// 더블 링크드 리스트로 구성되어 있다.

// **배열
// 자바스크립트 에서 배열은 Double Linked List 형태이다.
// 양쪽에서 삽입과 삭제가 가능하다.
// 가장 뒤에 삽입과 삭제를 해서 스택처럼 사용 가능 : push, pop
// 맨 앞에 삽입과 삭제를 해서 큐 처럼 사용 가능 : unshift, shift
// for - each 를 이용하면 인덱스가 순서대로 임시변수에 대입
// sort 함수를 이용해서 정렬이 가능
// 숫자 데이터도 문자열로 간주하고 문자열을 기준으로 정렬한다.
// 원하는 방식으로 정렬을 하려면 sort 함수에 매개변수가 2개이고 리턴은 정수로 하는 함수를 대입하면 된다.
// 자바스크립트는 문자열도 크기 비교가 가능하다. ( >, <, == 를 이용)

// 배열 작업을 위해 추가된 함수 (다른 프로그래밍 언어에도 유사한 함수 존재)
// 1. filter():
//    매개변수가 1개이고 boolean 을 리턴하는 함수를 대입해서 결과가 true 인 데이터만 가지고
//    새로운 배열을 만들어 주는 함수

// 2. map():
//    매개변수가 1개이고 객체를 리턴하는 함수를 대입해서 리턴되는 데이터 배열을 만들어 주는 함수

// 3. forEach:
//    매개변수가 1개이고 리턴이 없는 함수를 만들어서 배열의 모든 요소에게 작업을 수행하는 함수

// # Map 과 filter 는 다른 모든 언어 에서도 동일한 이름을 사용한다.

// **JSON 객체
// JSON.parse(JSON문자열)
// 문자열을 자바스크립트 타입의 자료로 변환해주는 메소드
// jquery 에도 이 작업을 해주는 메소드가 있지만 이 메소드를 사용하는 것이 속도 면에서 좋다.

// **BOM(Browser Object Model)
// 브라우저와 관련된 객체
// body 태그 안에 만들어진 객체들은 별도로 DOM(Document Object Model) 이라고 한다.

// 1. window 객체
//    브라우저 자체를 의미하는 객체
// 1-1. location
//      현재 열린 페이지의 url 이 저장되는 속성인데 이 속성의 값을 변경하면 
//      대입된 URL 에 해당하는 페이지로 이동한다.

// 1-2. self
//      현재 윈도우 이다.

// 1-3. open()
//      팝업 창을 만들어주는 메소드로 첫 번째 매개변수는 열려고 하는 페이지의 URL 이고 
//      두 번째 매개변수는 통신을 하기 위한 이름 그리고 세 번째는 옵션이다.
//      최근에는 브라우저에 팝업 창 차단 기능이 있어서 사용하는 것을 권장하지 않는다.
//      레이어 팝업으로 대신하는 경우가 많다.

// 1-4. 타이머 관련 멕소드
//      setTimeout(함수, 시간)
//      시간 후에 함수를 1번만 수행

//      setInterval(함수, 시간)
//      시간 후에 함수를 계속 수행

//      clearTimeout(setTimeout 이 리턴한 값을 갖는 변수)
//      타이머 삭제

//      clearInterval(setInterval 이 리턴한 값을 갖는 변수)
//      타이머 삭제

//      document.getElementById(아이디)
//      body 에 있는 태그를 자바스크립트 에서 가져오기
//      ex)
//      <body>
//        <img src = "a.png" id = "image"/>
//      </body>
//      <script>
//        var img = document.getElementById("image");
//        img.src = "b.png"

// 2. location 객체
//    URL 에 대한 정보를 갖는 객체
//    href
//    현재 보여지고 있는 URL
//    이 속성의 값을 변경하면 현재 페이지에 출력되는 페이지가 변경된다.

//    기본적 구조
//    프로토콜://도메인이나 IP:포트번호/페이지 경로 또는 #다른 영역의 id(책갈피)?속성=값&....
//    프로토콜은 생략이 불가능하나 웹 브라우저의 경우에는 도메인 부터 입력한 경우에 http 나 https
//    를 자동으로 붙여 준다.
//    // 로 시작하는 경우에는 상황에 따라 http 나 https 로 시작하는 구문이다.
//    도메인이나 IP는 생략이 불가능
//    서비스 하고 있는 포트번호가 프로토콜의 기본 포트와 일치하면 생략이 가능한데 이 경우는
//    서버에서 시작 페이지를 설정해서 시작 요청이 오면 특정 페이지를 출력하도록 되어 있는 경우이다.
//    속성=값 부분은 서버에서 넘겨주는 패러미터인데 쿼리스트링 이라고도 한다. (없을 수도 있다)

// 3. navigator
//    접속한 운영체제나 브라우저 정보들을 저장하고 있는 객체
//    *userAgent (게중요)
//    운영체제와 브라우저 엔진 종류를 문자열로 저장하고 있는 속성
//    이 속성의 값을 이용해서 모바일에서 접속했는지 여부를 판단한다.
//    이 때 android 는 태블릿과 스마트폰으로 구분할 수 없다.
//    IOS 는 iphone 과 iPad 그리고 ipod 로 구분이 된다.

// **DOM
// Document Object Model 의 약자로 html 문서 내의 모든 태그를 의미한다.
// 1. document 객체
//    문서 내의 모든 태그를 관리하는 객체 이다.
//    여러 가지 속성을 가지고 있는데 body 는 문서 내의 body 태그를 의미한다.
//    forms 는 모든 폼 태그의 배열

// 2. 모든 DOM 객체의 공통 속성
//    innerHTML
//    태그 안의 내용

//    createElement(태그)
//    내부에 태그를 생성한다.

//    createTextNode(문자열)
//    내부에 문자열을 생성한다.

// 3. DOM 객체 가져오는 메소드
//    Document.getElementsById(id)
//    id 를 가진 태그를 가져온다.

//    document.getElementsByName(name)
//    name 을 가진 모든 태그를 배열로 가져온다.

//    document.getElementsTagName(tag)
//    tag 을 가진 모든 태그를 배열로 가져온다.

//    document.getElementsClassName(class)
//    class 을 가진 모든 태그를 배열로 가져온다.

// 4. 폼 요소의 공통 속성
//    value
//    input 태그의 값

//    disabled
//    요소의 활성화 여부

//    radio 와 checkbox
//    checked 속성

//    select 안에 있는 option
//    selected 속성과 selectedIndex 속성

//    # 예전 IE 에서는 id 가 없으면 name 을 id 로 인식해서 사용하는 경우가 있다.
//      예전의 소스코드를 보면 name 을 설정해서 구분하는 경우가 있다.
//      하지만 이 기능은 크롬이나 사파리에서는 동작하지 않는다.

//    #	태그 안에 메시지를 입력하고자 하면 innerHTML	 을 이용하면 된다.
//      태그를 인식한다.
//      스타일을 변경하고자 할 때는 style.속성이름 = 값 의 형태로 하면 된다.

// **이벤트 처리
// 1. 이벤트 처리 방법
// 1-1. 인라인 이벤트 처리
//      태그 안에 이벤트 속성에 자바스크립트 코드를 삽입하는 방식
//      우선 순위가 가장 높다.

// 1-2. 전통적인 이벤트 처리
//      자바스크립트 코드 영역에서 DOM객체.이벤트속성 = function(){이벤트가 발생했을 때 수행할 내용}

// 1-3. 표준 이벤트 모델
//      자바스크립트 코드 영역에서 DOM객체.addEventListner(이벤트이름,function(){이벤트가 발생했을 때 수행할 내용}
//      이 방식을 사용하면 기존 이벤트 처리 코드에 내용을 추가할 수 있다.
//      1-1번과 1-2번은 갱신하는 방식이다.
//      1-1번과 1-2번으로 작성할 때는 on이벤트 이름의 형식으로 입력한다.

// 2. 이벤트 처리 함수에서 이벤트가 발생했을 때 이벤트에 대한 객체를 넘겨받는 방법
//    브라우저 별로 다르다.
//    IE 하위 버전에서는 window.event 로 가져온다.
//    그 이외 브라우저는 이벤트 처리 함수를 만들 때 매개변수를 만들면 된다.

//    function(e){
//      // 매개변수에 데이터가 있으면 event 에 바로 대입하고 없으면 window.event	의 내용을 대입
//      // 자바 스크림트에서 || 를 이용해서 대입받는 코드의 대부분은 IE 하위 버전을 지원하기 위해서이다.
//      var event = e || window.event
//    }
     

package Web;

public class 필기0816 {

}
