// I/O 스트림
// 입 출력 대상과의 통로

// Stream API
// 데이터의 모임
// 데이터를 가공해서 집계를 하기 위한 API
// 집계 - 합계, 평균, 최대값, 최소값, 개수, 분산 , 표준편차, 4분위수(25%, 50%, 75%-95%-99%)

// **오라클의 데이터를 호출해서 Stream API 이용하기
// 데이터는 파일, 데이터베이스, 분산 파일 시스템, 웹 서버, 소켓 서버 등에서 제공된다.
// 1. 샘플 데이터 생성을 위해 오라클에 접속해서 SQL 을 실행
// 2. 테이블 생성(Student)
//    학번- 문자열(10자리), 기본키
//    이름- 한글 문자열(10자리)
//    학과- 한글 문자열(10자리)
//    점수- 정수 3자리
//    나이- 정수 3자리
//    성별- 한글 문자열 2자리, 양성(check 제약조건 사용)

// 3. Java Project 생성

// 4. Oracle 데이터를 읽기 위해서 오라클 드라이버 파일을 프로젝트에 추가하고 빌드 패스 에 추가한다.

// 5. Stdent 테이블의 데이터를 저장하기 위한 VO(Variable Object) 클래스를 생성
//    StdentVO

// 6. 데이터베이스 연동을 위한 DAO 클래스 생성
//    StdentDAO

//    select 구문을 실행하는 메소드일 때는 where 절이 있으면 매개변수가 있어야 한다.
//    가져오는 데이터가 1개이면 저장할 수 있는 자료형으로 리턴하면 되고 여러 개를 가져와야 하는 경우라면 select 절의 데이터를
//    저장할할 수 있는 클래스의 List 가 리턴되는 자료형이다.

// 7. 스트림 작업
// 7-1. 스트림 생성
//      배열: Arrays.stream(배열)
//      리스트 or set: .stream()

// 7-2. 중간처리 메소드
//      skip(정수)
//      limit(정수)
//      distinct()

//      filter(매개변수가 1개이고 boolean 을 리턴하는 람다)
//      mapTo자료형(클래스이름::자료형을 리턴하는 메소드이름)
//      sorted(): 데이터 정렬
//      sorted(매개벼누가 2개이고 정수를 리턴하는 람다)

// 7-3. 최종 처리 메소드
//      forEach(매개변수가 1개이고 리턴하지 않는 람다): 모든 요소에게 람다 내의 구문을 수행
//      count(): 데이터의 개수를 long 타입으로 반환한다.
//      allMatch(), anyMatch(), noneMatch(): 3개의 메소드는 매개변수로 하나의 매개변수를 가지고 boolean 을
//      리턴하는 람다를 대입해주어야 하는데 람다 함수의 결과를 가지고 allMatch() 는 전부 true 일 때만 ture 그렇지 않은 경우는
//      false 를 리턴한다.
//      noneMatch() 는 모두 false 를 리턴했을 때 true 를 리턴하고 그렇지 않은 경우는 false 를 리턴한다.
//      findFirst(): 첫 번째 데이터를 Optinal 타입으로 리턴한다.
//      findAny(): 랜덤하게 데이터를 Optional 타입으로 리턴한다.
//      Optional 타입으로 리턴되면 get 또는 orElse 또는 getAs 자료형 메소드를 이용해서 실제 데이터를 가져와야 한다.

// 집계함수
// count(), sum(): 일반 자료형으로 리턴
// max(), min(), average(): Optional 타입으로 리턴

// reduce 함수
// 제공되는 집계가 아닌 연산을 수행하기 위한 함수
// 매개변수로는 첫 번째는 연산을 수행하기 위한 초기값을 설정하고 두 번째는 2개의 매개변수를 가지고 연산을 수행해서 리턴하는 
// 람다 함수를 대입하면 된다.

// collect 함수
// 가공한 데이터를 List 나 Set 으로 다시 저장하고자 할 때 사용하는 함수이다.
// 스트림은 중간 작업을 한 후 최종 처리를 하고 나면 이전의 데이터를 전부 삭제한다.
// 이 때 중간 작업을 수행한 결과를 별도로 저장하고자 할 때 사용하는 함수가 collect 이다.
// 매개변수로 Collectors.to 자료구조 대입해주면 된다.
// 자료구조가 맵인 경우에는 다시 매개변수로 키로 사용할 데이터와 값으로 사용할 데이터를 대입해 주어야 한다.
// 자료구조 대신에 counting, summingInt(함수), averagingInt(함수) 등을 대입하면 개수와 합계 평균을 리턴하는데
// 보통의 경우 잘 사용하지는 않는다.
// 그룹화 함수와 같이 사용해서 그룹별 집계를 할 때 사용

// collect 함수의 매개변수로 Collectors 의 groupingBy(그룹화할 getter 함수) 를 대입하면 그룹화 해서 Map 으로 리턴한다.
// 매개변수로 앞에서 나온 집계함수를 대입하면 그룹 별로 집계를 해서 Map 으로 리턴한다.


package Stream;

public class 필기 {

}
