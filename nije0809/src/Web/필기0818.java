// html - XML
// html 과 형태가 비슷한 데이터인 XML 을 이용한다.
// XML 은 구조적이고 브라우저가 해석하지 않음
// 그러나 XML 은 무겁고 가격이 비싸다.
// 대체재 JSON 은 비용이 저렴하나 인간이 해석하기에는 더 난해함
// CSV 는 데이터가 아주 많을 때 이용
// ajax 은 비 동기적으로 자바스크립트를 이용해서 데이터를 받아오는 기술을 뜻한다.
// body 에 비해서 head 의 크기가 너무 크기 때문에 소량의 데이터 전송에는 부담이 된다.
// 그래서 나온 대안이 WebSocket 이다.

// # XML 이나 html 은 돔 구조인데 돔 구조는 'tree' 이다.

// **SDK(Software Development Kit) - API(Application Programming Interface)
// 프로그램을 개발하기 위한 도구
// Java SDK: JDK, Java API 는 같은 말이다.
// 어떤 운영체제나 기기의 프로그램을 개발하고자 할 때 제일 먼저 해야 할 일이 그 운영체제나
// 기기의 SDK	 를 다운로드 받아서 설치하는 일이다.

// # 웹 RTC 분야도 ㄱㅊ음

// ** HTML5	문서 구조 검증
// http://html5.validator.nu - 만든 파일을 업로드하면 문서 검증 해 주는 사이트
// https://caniuse.com/ - 브라우저 별 적용 범위를 확인 해 주는 사이트

// **semantic 태그
// 물리적으로는 div 나 span 와 동일하게 출력 되는데 의미를 부여하기 위해 만든 태그
// <section><article><aside><header><footer> 태그 등이 있다.

// 제목과 같이 보여져야 하는 항목은 figure 태그로 묶고 제목은 figcaption	 을 이용해서 출력
// 텍스트 내에서 강조는 mark 태그를 이용 - 노란색 음영이 설정된다.
// 텍스트 위에 주석처럼 작은 글자를 출력하고자 하는 경우는 ruby 를 이용하는 rp 와 rt 태그를 이용한다.
// rp 는 지원하지 않는 브라우저에 추가할 문자열을 뜻한다.
// 실제 보여지는 텍스트는 rt 이다.
// ex) 본<rp>(</rp> <rt>문</rt> <rp>)</rp>
//     의 경우 지원하는 브라우저는 본 위에 문이 작게 출력된다.
//     지원하지 않는 브라우저는 본(문) 으로 출력된다.

// **Multimedia 태그
// 1. video 태그
//    과거에는 비디오를 브라우저가 재생하는 것이 아니라 별도의 미디어 프로그램이 재생
//    미디어 재생 프로그램이 별도로 설치되어 있어야 했다.
//    video	태그를 이용하면 별도의 재생 프로그램 설치 없이 비디오를 재생할 수 있다.
//    video 태그 안에 source 태그를 이용해서 여러 개의 비디오 링크를 설정하면 재생 가능한
//    source 를 검색하여 재생하게 된다.
//    파일 변환만 해 두면 모든 브라우저에서 동일한 콘텐츠의 비디오를 재생할 수 있다.
//    이전의 웹 프로그래밍 에서는 멀티미디어 재생기를 직접 디자인하고자 하면 siverlight 나 flex 와 같은
//    프레임워크를 공부해야 했지만 지금은 video 와 audio 태그를 자바스크립트 에서 직접 제어할 수 있기 때문에
//    별도의 프레임워크를 공부하지 않아도 멀티미디어 재생기를 직접 디자인 할 수 있다.

// 2. audio
//    음원 재생을 위한 태그

// **canvas
// html5 에 추가된 그리기 API
// 현재는 3d 캔버스도 webgl 을 이용해서 가능
// webgl 은 open gl 의 웹 버전이다.
// opengl 은 linux 나 unix 의 그래픽 가속 기술
// 스마트폰은 open gles 를 이용한다.

// windows 의 그래픽 가속 기술은 direct x 이다.

// 1. canvas 생성
//    <canvas id="캔버스아이디" width="너비" height="높이"></canvas>

// 2. 자바스크립트에서 조작
//    var 캔버스변수 = document.getElementById("캔버스아이디")
//    컨텍스트 가져오기
//    ex) var 컨택스트변수 = 캔버스변수.get.Context("2d");
//    캔버스 조작

// 3. Context
//    그래픽을 출력하기 위한 기본 정보를 저장한 객체
//    그래픽을 출력하려면 면색, 선색, 글자색 등을 지정해야 하는데 매번 지정하는 것은
//    번거롭기 때문에 기본 정보를 context 에 저장해 두고 그 저장된 내용을 이용해서
//    도형이나 그림 또는 글자 등을 캔버스에 출력한다.
//    안드로이드 에서도 화면에 무엇인가를 출력하기 위해서는 첫 번째 매개변수로 Context 
//    객체를 대입하도록 한다.

// 4. 이미지 출력
// 4-1. 이미지 객체 생성
//      new Image()

// 4-2. 이미지 소스 설정은 src 속성
//      절대경로 와 상대경로 모두 가능하다.

// 4-3. 이미지 출력
//      컨텍스트변수.drawImage(이미지객체, x좌표, y좌표)
//      x좌표와 y좌표에 원본 이미지 크기 대로 출력
//      컨텍스트변수.drawImage(이미지객체, x좌표, y좌표, 자르는 너비, 자르는 높이)
//      x좌표와 y좌표에 자르는 너비와 자르는 높이 만큼으로 확대 축소해서 출력
//      컨텍스트변수.drawImage(이미지객체, x좌표, y좌표, 자르는 너비, 자르는 높이, 출력할 x좌표, 출력할 y 좌표)
//      x좌표와 y좌표에 자르는 너비와 자르는 높이 만큼으로 자른 후 다음 x 좌표와 y 좌표
//      너비와 높이 만큼 확대 축소해서 출력

// 4-4. 이미지 파일의 내용을 비동기적으로 읽기 때문에 바로 출력하는 것은 안 되고
//      이미지를 전부 로드하고 난 후 출력하도록 해야 한다.
//      이미지가 전부 로드되면 onload 이벤트가 발생한다.



package Web;

public class 필기0818 {

}
