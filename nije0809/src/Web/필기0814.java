// **연산자
// 1. new 
//    생성자를 호출해서 인스턴스를 생성하고 참조를 리턴하는 연산자

// 2. this 
//    생성자의 메소드 내에서 객체 자신을 가리키는 연산자 메소드 안에서 
//    생성자에서 만든 내용에 접근할 때 this. 을 반드시 사용

// 3. typeof 
//    자료형을 리턴하는 연산자

// 4. delete 
//    속성을 지우는 연산자

// 5. instance of
//    인스턴스가 클래스로부터 만들어질 수 있는지 확인(boolaen 해주는 연산자)
//    ex) 인스턴스이름 instance of 클래스이름

// 6. in
//    속성이 인스턴스에 존재하는지의 여부를 확인
//    ex) 속성 in 인스턴스 (존재 여부/리턴 타입 불린)


// 배열을 출력하는 법
// alert(ar)
// 대화상자에 출력

// document.writeln(ar.toString())
// body	에 출력

// console.log(ar.join("/")
// 디버그 창 에서 확인

// # Class 생성 -> instance 의 과정은 RDNMS 와 같다. (모양이 결정되어 있음)
//   Map -> Instance 는 NoSQL (모양이 결정되어 있지 않음)


// **제어문
// 1. 분기문
// 1-1. if
//      자바 스크립트 에서는 0이 아닌 숫자나 null이 아닌 참조형도 true 로 간주
//      0과 null 은 false 로 간주

// 1) 단순 if
//    조건을 만족하는 경우에만 특정한 내용을 수행해야 할 때 사용
//    if(조건){
//             조건이 ture 일 때 수행할 내용
//           }

// 2) if - else
//    조건을 만족하는 경우와 그렇지 않은 경우에 수행할 내용이 다를 때 사용
//    if(조건){
//             조건이 false 일 때 수행할 내용
//           }

// 3) if - else if - else
//    조건을 만족하지 않는 경우에 조건을 다시 사용해야 하는 경우에 사용
//    이 때 else if 의 개수는 제한이 없고 else 는 생략이 가능
//    if(조건1){
//              조건1이 true 	일 때 수행할 내용
//            } else if(조건2){
//                             조건 1이 false 이고 조건 2가 true 일 때 수행할 내용
//            } else if....
//            (else{
//                   모든 조건이 false 일 때 수행할 내용
//                 })

// 1-2. switch
//      값에 의한 분기
//      정수나 문자열의 값을 가지고 분기
//      switch(데이터){
//        case 값1:
//             데이터의 값이 값1일 때 수행할 내용
//             break;
//        case 값2:
//             데이터의 값이 값2일 때 수행할 내용
//             break;
//      case 반복 가능

//      default:
//         일치하는 값이 없을 때 수행할 내용
//         break;
//      }

// 2. Loop(반복문)
// 2-1. while(조건){
//        조건이 false 가 될 때까지 반복할 내용
//      }

// 2-2. do{
//        while	안에 있는 조건이 false 가 될 때 까지 반복할 내용
//      }while(조건)

// 2-3. for(처음 한 번만 수행할 내용; 조건- false가 될 때 까지 수행하게 할 조건; 두 번째 부터 수행할 내용){
//         반복할 내용
//      }

// 2-4. for - in
//      for 임시변수 in 배열이나 객체{
//          수행할 내용
//      }

// 배열인 경우에는 임시변수에 인덱스가 대입된다.
// 객체인 경우에는 객체의 속성이 하나씩 대입된다.

// var ar = [10, 20. 30]
// for (t in ar){
//   alert(t): 0,1,2
//   alert(ar[t]): 10,20,30
// }

// var ob = {"name":"유국영","job":"학원관리자"}
// for (t in ar){
//   alert(t): name, job
//   alert(ob[t]): 유국영, 학원관리자
// }

// 3. 기타 제어문
// 3-1. break
//      switch 와 반복문에서 사용 가능한 제어문. 수행을 종료하고 스위치나 반복문을 빠져나오는 명령어
//      가까운 switch 나 반복문을 빠져나오는 점에 유의.
// 3-2. continue
//      반복문 에서만 사용 가능한 명령어로 다음 반복으로 넘어가게 하는 기능
// 3-3. return
//      함수의 수행을 종료하고 호출한 곳으로 이동하는 명령어
//      return 뒤에 데이터를 명시하여 데이터를 가지고 이동할 수도 있다.


// **함수(Function) 
// Method
// 소속이 있어서 리시버가 호출한다.
// 함수는 소속이 없어서 어디에서든지 호출 가능한 코드 블럭
// 프로그램에서 작업을 수행하는 단위
// 종류는 2가지가 있는데 하나는 사용자 정의함수(개발자가 만든 것)와 maker function(제공되는 것)
// 그리고 3rd party 함수(다른 개발자가 만들어 준 함수)로 나뉜다.

// 1. 함수 정의
//    function 이름(매개변수){
//      함수의 내용
//      return 데이터
//    }

// 1-2. 함수 정의2
//      var 이름 = function(매개변수){
//        함수의 내용
//        return 데이터
//      }

// 2. 함수 호출
//    이름(매개변수)
//    # 주의: 함수의 이름만 사용한 경우에는 함수의 주소를 뜻한다.
//    자바 스크립트에서의 함수는 하나의 자료형으로 간주된다.

// ex) 콘솔에 펑션을 3번 출력하는 함수 만들기
//     var disp = function( ){
//       console.log("function")
//     }
// ex) 함수 호출
//    disp( )

// # 자바 스크립트 에서는 함수가 리턴을 하고자 하는 경우 리턴 타입을 별도로 기재할 필요는 없다.
// 함수 안에서 return 데이터를 사용하기만 하면 데이터는 리턴된다.

// 매개변수를 만들 때 자료형을 기재하지 않고 매개변수 이름만 기재하면 된다.
// 매개변수는 함수 내의 지역변수가 된다.
// 함수를 만들 때 매개변수를 기재하지 않아도 매개변수를 대입하면 함수는 arguments 라는 배열을 만들어서
// 이 배열에 데이터를 순서대로 저장해서 사용할 수 있도록 해 준다.
// 매개변수를 대입하지 않으면 에러가 아니라 매개변수의 값을 undefined 로 사용한다.

// 2-1. callback function
//      상태 변화가 생기면 자동으로 호출되는 함수
//      보통은 이벤트 처리 함수로 많이 사용한다.
//      함수 안에 함수를 만들 수 있다. 이 경우에 만들어진 함수는 함수 안에서만 사용이 가능하다.

// 2-2. closure
//      함수 안에서 함수를 리턴하는 형태
//      이름없는 함수를 리턴하는 형태
//      이것을 람다라고 하는 사람도 있다.
//      함수 외부에서 함수 내부의 데이터를 변경할 목적으로 사용 (지역변수의 값을 변경하는 방법)

// **자바스크립트가 제공하는 함수- window 객체가 소유
// 1. alert(문자열)
//    문자열을 대화상자에 출력해주는 함수, 리턴은 없다.

// 2. confirm(문자열)
//    문자열을 제목으로 하여 대화상자를 출력하고 확인 버튼과 취소 버튼도 함께 출력해 주는데
//    누른 버튼을 Boolean 으로 알려준다.
//    확인을 누르면 true 취소를 누르면 false 를 리턴한다.

// 3. prompt(문자열 - 메시지, 문자열 - placeholder)
//    메시지를 제목으로 출력하고 텍스트 박스에 placeholder 를 출력하는 대화상자를 출력하고
//    확인 버튼과 취소 버튼을 출력해 주는데 확인 버튼을 누르면 입력한 문자열을 리턴하고
//    취소 버튼을 누르면 null 을 리턴한다.

// ex) 이름을 입력받아서 입력받은 이름을 화면에 출력

//     var name = prompt("이름을 말하라", "이름입력")
//     document.writeln("이름: " + name)

// 4. 인코딩 과 디코딩
// 4-1. Encoding
//      문자열을 컴퓨터에 저장하거나 통신을 이용해서 외부로 전송하기 위해서
//      메모리에 저장되는 형태로 변환하는 것

//  (1) encodeURIComponent 함수
//      알파벳과 숫자를 제외한 모든 부분을 인코딩

//  (2) escape
//      알파벳과 숫자 및 일부 특수문자를 제외하고 인코딩
//      encodeURI
//      알파벳과 숫자 및 일부 특수문자와 URL 을 표현할 때 사용하는 문자열을 제외하고
//      인코딩 한다.

//    # URL 을 인코딩 할 때는 encodeURL	을 사용해야 한다.
//      http:// 이 부분은 인코딩 하면 안 된다.

//    # URL 은 인코딩해서 전송해야 하는데 이 때 프로토콜과 도메인은 인코딩 하지 않는다.
//      ? 이후의 부분만 인코딩 해서 전송해야 한다.

//    # URL: 인터넷 상에서의 자원의 위치를 나타내는 주소
//      URI: 인터넷을 포함한 모든 곳에서의 자원의 위치를 나타내는 주소 (더 큰 개념)

// 4-2. Decoding
//      메모리에 저장된 형태로 되어 있는 문자열을 원래의 문자열로 복원하는 것

// **Instance - Object
// 자바스크립트는 객체 기반 언어라서 클래스를 생성하지 않고 인스턴스를 만들 수 있다.
// 1. 인스턴스 생성
//    {속성:데이터, 속성:데이터...}
//    속성은 문자열의 형태로 설정해야 한다.
//    데이터는 숫자, 문자열, Boolean, 다른 인스턴스, 함수 모두 가능하다.

// 2. 인스턴스의 속성 가져오기
//    인스턴스["속성이름"] 또는 인스턴스 속성이름
//    없는 속성이름 을 사용하면 null 이 리턴된다.
//    속성 중에서 함수의 경우는 인스턴스.속성이름() 으로 호출해야 한다.
//    함수를 호출하는 경우에는 없으면 null 을 리턴하지 않고 이런 속성이 없다고 에러를 발생시킨다.

// 3. 인스턴스의 속성 설정하기
//    인스턴스["속성이름"] = 데이터 또는 인스턴스 속성이름 = 데이터
//    존재하는 속성이름 이면 값은 갱신이 된다.
//    존재하지 않는 속성이름 이면 속성이 추가된다.

// 4. 인스턴스의 모든 속성을 순회
//    객체의 모든 속성을 임시변수에 대입하고 괄호 안의 내용을 반복한다.
//    for(임시변수이름 in 객체){
//       내용
//    }

// 5. 속성의 존재 여부를 확인
//    속성이름 in 객체
//    속성이 객체에 존재하면 true 를 리턴하고 그렇지 않으면 false 를 리턴한다.

// 6. 객체 이름을 생략하고 속성 이름 만으로 사용하도록 하고자 하는 경우
//    { } 에서는 속성이름만 사용하면 객체의 속성을 사용할 수 있다. 
//    with(객체){
//       내용
//    }

// 7. 생성자(Constructor)
//    인스턴스를 생성하기 위한 메소드
//    자바스크립트는 기본적으로 클래스가 없어서 동일한 속성을 갖는 인스턴스를 만드는 것이 불편하다.
//    위와 같은 문제를 해결하기 위해 생성자를 만들 수 있는 문법을 제시했다.
//    일반 함수를 만들듯이 함수를 만드는데 변수를 선언할 때 this 를 사용하면 호출할 때 속성을 생성 해 준다.

//    ex) 이름과 나이를 갖는 생성자
//        function Person(name, age){
//           this.name = name
//           this.age = age
//           this.toString = function(){
//              return name + ":" + age
//           }
//        }

//        var obj1 = new Person("존존스",30)
//        var obj2 = new Person("최두호",91)

//        alert(obj1.toString())
//        alert(obj2.toString())

// 


package Web;

public class 필기0814 {

}
