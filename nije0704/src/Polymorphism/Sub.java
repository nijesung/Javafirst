// *polymorphism(다형성)
//  동일한 메시지에 대하여 다르게 반응하는 성질
//  동일한 코드에 어떤 객체가 대입되었는지에 따라서 다른 메소드를 호출하는 것
//  참조형 사이의 대입과 overriding 을 이용해서 구현한다.
//  참조형 변수는 변수를 선언할 때 사용한 자료형을 가지고 자신의 멤버를 호출하는데 예외적으로 overriding 된 메소드는 선언할 때
//  사용한 자료형을 가지고 호출하는 것이 아니고 대입될 때 사용한 자료형을 가지고 멤버를 호출한다.

// 객체 지향의 3대 특징
// 1. 캡슐화(Encapsuleation): 하나의 목적을 달성하기 위한 변수와 메소드를 하나로 묶는 것 -> 클래스 만드는 것
// 2. 상속성(inheritance): 상위 클래스의 모든 것을 하위 클래스가 물려받는 것
// 3. 다형성(Polymorphism): 동일한 메시지(코드)에 대하여 다르게 반응하는 성질(다른 메소드 호출)
// 다른 객체 지향 언어를 공부할 때 배열까지는 다시 보지 말고 클래스를 만드는 것과 상속을 하는 방법 그리고 다형성을 구현하는 방법만 공부하면 된다

package Polymorphism;

public class Sub extends Super{ // Super 클래스를 상속받는 Sub 클래스
	
	@Override // 아래 어노테이션이 에러가 발생하지 않으면 제대로 오버라이딩 한 것이다
	public void just() { // 메소드를 오버라이딩
		System.out.println("그냥 안 만든거에요");
	}
	
	public void what() {
		System.out.println("하위 클래스에 만든 메소드");
	}
	
}
